print(St)
#Intialize option value at maturity
for(j in (2*Nj+1):1){
Option.value[j,Nj+1]  = max(0,K-St[j])
}
#Step back through the lattice
for(i in N:1){
for(j in (2*Nj):2){
Option.value[j,i]=pu*(Option.value[j+1,i+1]) + pm*(Option.value[j,i+1]) + pd*(Option.value[j-1,i+1])
#Boundary Conditions
Option.value[2*Nj+1,i]=Option.value[2*Nj,i] + (St[2*Nj]-St[2*Nj+1])
Option.value[1,i]=Option.value[2,i]
#print(Option.value)
# Apply early exercise Condition
for(j in (2*Nj+1):1){
#Option.value[j,Nj+1]=max(Option.value[j,Nj],K-St[j])
Option.value[j,i]=max(Option.value[j,i],K-St[j])
}
#print(Option.value)
}
}
print(Option.value)
}
trinomial_tree_american = function(K, T, S, sig, r, div, N, Nj, dx){
Option.value <- matrix(, nrow = (2*Nj+1), ncol = (Nj+1))
# Precompute Constants
dt = T/N
nu = r - div - 0.5 * sig^2
edx = exp(dx)
pu = 0.5*dt*((sig/dx)^2 + nu/dx)
pm = 1.0 - dt*(sig/dx)^2 - r*dt
pd = 0.5*dt*((sig/dx)^2 - nu/dx)
# Intialise asset prices at maturity
St = c()
St[2*Nj+1]=S*exp(-Nj*dx)
for(j in (2*Nj):1){
St[j]=St[j+1]*edx
}
print(St)
#Intialize option value at maturity
for(j in (2*Nj+1):1){
Option.value[j,Nj+1]  = max(0,K-St[j])
}
#Step back through the lattice
for(i in N:1){
for(j in (2*Nj):2){
Option.value[j,i]=pu*(Option.value[j+1,i+1]) + pm*(Option.value[j,i+1]) + pd*(Option.value[j-1,i+1])
#Boundary Conditions
Option.value[2*Nj+1,i]=Option.value[2*Nj,i] + (St[2*Nj]-St[2*Nj+1])
Option.value[1,i]=Option.value[2,i]
#print(Option.value)
# Apply early exercise Condition
for(j in (2*Nj+1):1){
#Option.value[j,Nj+1]=max(Option.value[j,Nj],K-St[j])
Option.value[j,i]=max(Option.value[j,i],K-St[j])
}
#print(Option.value)
}
}
print(Option.value)
}
trinomial_tree_american(100, 1, 97, 0.6, 0.02, 0.4, 3, 3, 0.2)
trinomial_tree_american(100, 1, 97, 0.6, 0.02, 0.04, 3, 3, 0.2)
trinomial_tree_american(100, 1, 100, 0.2, 0.06, 0.03, 3, 3, 0.2)
trinomial_tree_american = function(K, T, S, sig, r, div, N, Nj, dx){
Option.value <- matrix(, nrow = (2*Nj+1), ncol = (Nj+1))
# Precompute Constants
dt = T/N
nu = r - div - 0.5 * sig^2
edx = exp(dx)
pu = 0.5*dt*((sig/dx)^2 + nu/dx)
pm = 1.0 - dt*(sig/dx)^2 - r*dt
pd = 0.5*dt*((sig/dx)^2 - nu/dx)
# Intialise asset prices at maturity
St = c()
St[2*Nj+1]=S*exp(-Nj*dx)
for(j in (2*Nj):1){
St[j]=St[j+1]*edx
}
print(St)
#Intialize option value at maturity
for(j in (2*Nj+1):1){
Option.value[j,Nj+1]  = max(0,K-St[j])
}
#Step back through the lattice
for(i in N:1){
for(j in (2*Nj):2){
Option.value[j,i]=pu*(Option.value[j+1,i+1]) + pm*(Option.value[j,i+1]) + pd*(Option.value[j-1,i+1])
#Boundary Conditions
Option.value[2*Nj+1,i]=Option.value[2*Nj,i] + (St[2*Nj]-St[2*Nj+1])
Option.value[1,i]=Option.value[2,i]
#print(Option.value)
# Apply early exercise Condition
for(j in (2*Nj+1):1){
#Option.value[j,Nj+1]=max(Option.value[j,Nj],K-St[j])
Option.value[j,i]=max(Option.value[j,i],K-St[j])
}
#print(Option.value)
}
}
print(Option.value)
}
rm(list=ls())
trinomial_tree_american = function(K, T, S, sig, r, div, N, Nj, dx){
Option.value <- matrix(, nrow = (2*Nj+1), ncol = (Nj+1))
# Precompute Constants
dt = T/N
nu = r - div - 0.5 * sig^2
edx = exp(dx)
pu = 0.5*dt*((sig/dx)^2 + nu/dx)
pm = 1.0 - dt*(sig/dx)^2 - r*dt
pd = 0.5*dt*((sig/dx)^2 - nu/dx)
# Intialise asset prices at maturity
St = c()
St[2*Nj+1]=S*exp(-Nj*dx)
for(j in (2*Nj):1){
St[j]=St[j+1]*edx
}
print(St)
#Intialize option value at maturity
for(j in (2*Nj+1):1){
Option.value[j,Nj+1]  = max(0,K-St[j])
}
#Step back through the lattice
for(i in N:1){
for(j in (2*Nj):2){
Option.value[j,i]=pu*(Option.value[j+1,i+1]) + pm*(Option.value[j,i+1]) + pd*(Option.value[j-1,i+1])
#Boundary Conditions
Option.value[2*Nj+1,i]=Option.value[2*Nj,i] + (St[2*Nj]-St[2*Nj+1])
Option.value[1,i]=Option.value[2,i]
#print(Option.value)
# Apply early exercise Condition
for(j in (2*Nj+1):1){
#Option.value[j,Nj+1]=max(Option.value[j,Nj],K-St[j])
Option.value[j,i]=max(Option.value[j,i],K-St[j])
}
#print(Option.value)
}
}
print(Option.value)
}
trinomial_tree_american(100, 1, 100, 0.2, 0.06, 0.03, 3, 3, 0.2)
0.0593192*0.25+4.13105*0.5+33.5814*0.25
0.0593192*0.25
0.0593192*0.25+4.13105*0.5+0.25*33.5814
0.5*10.7783+0.25*56.6386
library(Sim.DiffProc)
f <- expression(2*(3-x))
g <- expression(2*x)
res1 = snssde1d(drift=f,diffusion=g,M=1000,x0=1)
?`expression()
?expression()
f <- as.expression(2*(3-x))
g <- as.expression(2*x)
res1 = snssde1d(drift=f,diffusion=g,M=1000,x0=1)
library(Sim.DiffProc)
f <- as.expression(2*(3-x))
install.packages("Sim.DffProc")
install.packages("Sim.DiffProc")
install.packages("Sim.DffProc")
install.packages("Sim.DiffProc")
library(Sim.DiffProc)
library(Sim.DiffProc)
install.packages("Sim.DiffProc")
uninstall.packages("Sim.DiffProc")
uninstall("Sim.DiffProc")
?uninstall
remove.packages("Sim.DiffProc")
remove.packages(Sim.DiffProc)
install.packages("Sim.DiffProc")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install.packages("Sim.DiffProc")
library(Sim.DiffProc)
f <- as.expression(2*(3-x))
g <- as.expression(2*x)
res1 = snssde1d(drift=f,diffusion=g,M=1000,x0=1)
library(Sim.DiffProc)
install.packages("Sim.DiffProc")
rm(list=ls())
library(Sim.DiffProc)
f <- as.expression(2*(3-x))
options(rgl.useNULL=TRUE)
a=10^6
N=100000000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
a=10^6
N=100
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
h= (-a + 2 * (2 * a)/N) - (-a + 1 * (2 * a)/N)
h
a
-a + 2 * (2 * a)/N
-a + 1 * (2 * a)/N
h=0.0002
e=10^-4
c=0
Sum=0
previous=0
for(x in seq(from=0, to=2, by=h)){
s=1 + exp(-x*2) * cos(8*x^(2/3))
if(x==0 | x==2){
s=s/2
}
Sum=sum(Sum,s,na.rm = T)
Integrand_value = h*Sum
if(abs(Integrand_value-previous) < e){
break
}
else{
c=c+1
}
previous=Integrand_value
}
print("Integral value is")
print(Integrand_value)
print("To reach convergence the algo needs ")
print(c)
h=0.0002
e=10^-4
c=0
Sum=0
previous=0
for(x in seq(from=0, to=2, by=h)){
s=1 + exp(-x*2) * cos(8*x^(2/3))
if(x==0 | x==2){
s=s/3
}
else if(x %% 2==0){
s=4*s/3
}
else{
s=2*s/3
}
Sum=sum(Sum,s,na.rm = T)
Integrand_value = h*Sum
if(abs(Integrand_value-previous) < e){
break
}
else{
c=c+1
}
previous=Integrand_value
}
print("Integral value is")
print(Integrand_value)
h=0.0002
e=10^-4
c=0
Sum=0
previous=0
for(x in seq(from=0, to=2, by=h)){
s=1 + exp(-x*2) * cos(8*x^(2/3))
if(x==0 | x==2){
s=s/2
}
Sum=sum(Sum,s,na.rm = T)
Integrand_value = h*Sum
if(abs(Integrand_value-previous) < e){
break
}
else{
c=c+1
}
previous=Integrand_value
}
print("Integral value is")
print(Integrand_value)
print("To reach convergence the algo needs ")
print(c)
h=0.0002
e=10^-4
c=0
Sum=0
previous=0
for(x in seq(from=0, to=2, by=h)){
s=1 + exp(-x*2) * cos(8*x^(2/3))
if(x==0 | x==2){
s=s/3
}
else if(x %% 2==0){
s=4*s/3
}
else{
s=2*s/3
}
Sum=sum(Sum,s,na.rm = T)
Integrand_value = h*Sum
if(abs(Integrand_value-previous) < e){
break
}
else{
c=c+1
}
previous=Integrand_value
}
print("Integral value is")
print(Integrand_value)
a=10^6
N=100
e=10^-4
c=0
Sum=0
previous=0
for(i in 2:(N)){
for(n in 1:(i-1)){
x = -a + n * (2 * a)/n
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
h= (-a + 2 * (2 * a)/n) - (-a + 1 * (2 * a)/n)
Integrand_value = h*(1/2 + Sum + sin(n+1)/2)
if(abs(Integrand_value-previous) < e){
break
}
c=c+1
previous=Integrand_value
}
}
print("To reach convergence the algo needs ")
print(c)
Sum
Integrand_value
a=10^6
N=100000000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
a=10^6
N=10000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
h= (-a + 2 * (2 * a)/N) - (-a + 1 * (2 * a)/N)
Integrand_value = h*(1/2 + Sum + sin(N)/2)
print(Integrand_value)
a=10^6
N=100000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
h= (-a + 2 * (2 * a)/N) - (-a + 1 * (2 * a)/N)
Integrand_value = h*(1/2 + Sum + sin(N)/2)
print(Integrand_value)
a=10^6
N=1000000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
h= (-a + 2 * (2 * a)/N) - (-a + 1 * (2 * a)/N)
Integrand_value = h*(1/2 + Sum + sin(N)/2)
print(Integrand_value)
a=10^6
N=10000000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
h= (-a + 2 * (2 * a)/N) - (-a + 1 * (2 * a)/N)
Integrand_value = h*(1/2 + Sum + sin(N)/2)
print(Integrand_value)
?sum()
a=10^6
N=10000000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
Sum
h
Integrand_value = h*(1/2 + Sum + sin(N)/2)
print(Integrand_value)
a=10^6
N=10000000
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
print(Sum)
h= (-a + 2 * (2 * a)/N) - (-a + 1 * (2 * a)/N)
h
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
}
h
h
a=10^6
N=10000000
c=0
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
if(is.na(s)){
c=c+1
}
}
c
a=10^6
N=10000000
c=0
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
if(is.na(s)){
c=c+1
print(x)
}
}
a=10^6
N=10000000
c=0
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
if(is.na(s)){
c=c+1
print(x)
}
}
rm(list=ls())
a=10^6
N=10000000
c=0
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
if(is.na(s)){
c=c+1
print(x)
}
}
print(Sum)
a=10^6
N=10000000
c=0
Sum=0.0
for(n in 1:(N-1)){
x = -a + 0.2*n
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
if(is.na(s)){
c=c+1
print(x)
}
}
print(Sum)
a=10^6
N=10000000
c=0
Sum=0.0
for(n in 1:(N-1)){
x = -a + n * (2 * a)/N
print(x)
s=sin(x)/x
Sum=sum(Sum,s,na.rm = T)
if(is.na(s)){
c=c+1
print(x)
}
}
setwd("~/Desktop/Plus Plus Capital Management/Futures Market Analysis - Plus Plus Capital 4Management 4/Coffee")
symbol = "CTA"
months.1=c('H','K','N','Z')
months=c('H','K','N','Z','H','K','N','Z')
data = read.csv("COFFEE_prices_ALLMONTHS.csv")
data
data = data[6:nrow(data),]
lead.contracts = data$X.1
lead.contracts
lead.contracts = sub("(.{2})(A*)", "\\1A\\2", lead.contracts)
lead.contracts
data = read.csv("COTTON_prices_ALLMONTHS.csv")
data = data[6:nrow(data),]
data = read.csv("COTTON_prices_ALLMONTHS.csv")
data
